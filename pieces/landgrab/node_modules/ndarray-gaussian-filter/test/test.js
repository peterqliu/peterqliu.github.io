"use strict"
var filter = require("../gauss.js")
var ndarray = require("ndarray")
var cwise = require("cwise")
var test = require("tape")
var fuzz = require("test-fuzzy-array")
var ops = require("ndarray-ops")

var computeMoments = cwise({
  args: ["index", "array"],
  pre: function() {
    this.m0 = 0
    this.m1 = 0
    this.m2 = 0
    this.m3 = 0
    this.m4 = 0
  },
  body: function(i, a) {
    this.m0 += a
    this.m1 += a*i[0]
    this.m2 += a*Math.pow(i[0], 2)
    this.m3 += a*Math.pow(i[0], 3)
    this.m4 += a*Math.pow(i[0], 4)
  },
  post: function() {
    return [this.m0, this.m1, this.m2, this.m3, this.m4]
  }
})

test("blur", function(t) {
  var almostEqual = fuzz(t, 0.001)
  var ref0 = [1,2,3]
  //var ref1 = [1.052321798432616,1.6398740404471461,1.5866872815511268] // This would be the correct answer using linear interpolation
  var ref1 = [1.043882, 1.766932, 1.733479] // This was obtained with lots of padding
  var ref1wrap = [1.8884458797533459, 2.000000000000001, 2.1115541202466552] // Generated by this module, so violating to match this can only be considered a possible regression
  
  almostEqual(filter(ndarray([1,2,3]), 0).data, ref0, "sigma: 0")
  almostEqual(filter(ndarray([1,2,3]), 1).data, ref1, "sigma: 1")
  almostEqual(filter(ndarray([1,2,3]), 1, true).data, ref1wrap, "sigma: 1, wrapped")

  var peak = ndarray(new Float64Array(1001))
  for(var sigma = 10; sigma<=100; sigma+=9) {
    ops.assigns(peak, 0.0)
    peak.set(500, 1)
    filter(peak, sigma)
    var moments = computeMoments(peak)
    moments = [
      moments[0],
      moments[1],
      moments[2] - moments[1]*moments[1], // variance
      Math.abs(moments[3] - 3*moments[1]*moments[2] + 2*Math.pow(moments[1],3))/Math.pow(sigma, 3), // skewness
      (moments[4] - 4*moments[1]*moments[3] + 6*Math.pow(moments[1], 2)*moments[2] - 3*Math.pow(moments[1], 4))/Math.pow(sigma, 4) - 3 // excess kurtosis
    ]
    almostEqual(moments, [1, 500, Math.pow(sigma, 2), 0, 0], "moments, sigma: " + sigma)
  }
  
  t.end()
})
